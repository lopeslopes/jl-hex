import numpy as np
import spglib
import matplotlib.pyplot as plt


def read_lattice(path):
    try:
        with open(file=path) as f:
            data = f.readlines()
        points = []
        for line in data:
            aux = line.split(";")
            points.append([float(aux[0]), float(aux[1]), 0.0])

        # points = np.array(points)
        return points
    except:
        print("No file found in "+path)
        return 0


a = 2.46
d = np.sqrt((a**2) / (2 * (1 - np.cos(2 * np.pi / 3))))
d1 = [d * np.cos(np.pi / 6), d * np.sin(np.pi / 6), 0.0]

# DEFINE LATTICE VECTORS

# HEXAGONAL CELL MATCHING OVERLAP LATTICES
lattice = np.array([[4428.000519758899, 2484.072918780167, 0.0],
                    [-4365.2705123956675, 2592.7244786925335, 0.0],
                    [0.0, 0.0, 10000.0]])

# SIMPLE CUBIC LATTICE FOR TESTING
# lattice = np.array([[1.0, 0.0, 0.0],
#                     [0.0, 1.0, 0.0],
#                     [0.0, 0.0, 1.0]])

# BCC LATTICE FOR TESTING
# lattice = np.array([[-0.5, 0.5, 0.5],
#                     [0.5, -0.5, 0.5],
#                     [0.5, 0.5, -0.5]])

# FCC LATTICE FOR TESTING
# lattice = np.array([[0.5, 0.5, 0.0],
#                     [0.0, 0.5, 0.5],
#                     [0.5, 0.0, 0.5]])

# TESTING LENGTHS
dist1 = np.sqrt(lattice[0,0]**2 + lattice[0,1]**2 + lattice[0,2]**2)
dist2 = np.sqrt(lattice[1,0]**2 + lattice[1,1]**2 + lattice[1,2]**2)
dist3 = np.sqrt(lattice[2,0]**2 + lattice[2,1]**2 + lattice[2,2]**2)
print(f"|a1| = {dist1}")
print(f"|a2| = {dist2}")
print(f"|a3| = {dist3}")

# TESTING OTHER ATOM POSITIONS TO DEBUG SPGLIB
# positions = np.array([[0.0, 0.0, 0.0],
#                       [-1322.249830067740, 2493.3053571691007, 0.0]])
# numbers = [1, 2]
#
# positions = np.array([[0.0, 0.0, 0.0],
#                       [-1322.249830067740, 2493.3053571691007, 0.0],
#                       [1496.9101757073777, 2520.290105417622, 0.0],
#                       [-1.2306879586268324, 128.5354838445569, 0.0]])
# numbers = [1, 2, 3, 4]

positions = np.array([[0.0, 0.0, 0.0]])
numbers = [1]

graphene_structure = (lattice, positions, numbers)

# SYMMETRY CALCULATIONS
sym_data = spglib.get_symmetry_dataset(graphene_structure, symprec=1e-5)
print(f"Group number:           {sym_data.number}")
print(f"Hall number:            {sym_data.hall_number}")
print(f"International notation: {sym_data.international}")
print(f"Hall notation:          {sym_data.hall}")

# GAMMA CENTERED MESH
mesh = [50, 50, 50]
mapping, grid = spglib.get_ir_reciprocal_mesh(mesh, graphene_structure, is_shift=[0, 0, 0])

# IRREDUCIBLE K-POINTS
ind_unique, counts = np.unique(mapping, return_counts=True)
print(f"Number of irreducible k-points: {len(ind_unique)}")
unique_kpts = grid[ind_unique] / np.array(mesh, dtype=float)
kpts = grid / np.array(mesh, dtype=float)
unique_kpts = np.transpose(unique_kpts)

# print(counts)

# ANALYZING ROTATIONS AND TRANSLATIONS
n_eqv = []
categories = []
for i in range(len(ind_unique)):
    cc = max(counts)/counts[i]
    if cc not in n_eqv:
        n_eqv.append(int(cc))
        categories.append([])

    categories[n_eqv.index(cc)].append(kpts[ind_unique[i]])


# READING LATTICES GENERATED BY JULIA PROGRAM
atomsAA = np.array(read_lattice("data/0.0191435_0.001/latticeAA.dat"))
lenAA = len(atomsAA)
atomsAB = np.array(read_lattice("data/0.0191435_0.001/latticeAB.dat"))
lenAB = len(atomsAB)
atomsBA = np.array(read_lattice("data/0.0191435_0.001/latticeBA.dat"))
lenBA = len(atomsBA)
atomsBB = np.array(read_lattice("data/0.0191435_0.001/latticeBB.dat"))
lenBB = len(atomsBB)

# PLOTTING LATTICE OF OVERLAP POINTS
ax1 = plt.subplot(211)

if (lenAA > 1):
    ax1.scatter(atomsAA[:,0], atomsAA[:,1], s=20, color="c")
if (lenBA > 1):
    ax1.scatter(atomsBA[:,0], atomsBA[:,1], s=20, color="green")
if (lenAB > 1):
    ax1.scatter(atomsAB[:,0], atomsAB[:,1], s=20, color="orange")
if (lenBB > 1):
    ax1.scatter(atomsBB[:,0], atomsBB[:,1], s=20, color="red")

ax1.quiver(0.0, 0.0, lattice[0,0], lattice[0,1], angles="xy", scale_units="xy", scale=1, color="red")
ax1.quiver(0.0, 0.0, lattice[1,0], lattice[1,1], angles="xy", scale_units="xy", scale=1, color="green")

ax1.set_aspect("equal")


# PLOTTING REAL SPACE POINTS AFTER ROTATIONS
# ax2 = plt.subplot(212)
ax2 = plt.subplot(212, projection="3d")

p1 = lattice[0,:]
p2 = lattice[1,:]
p3 = lattice[2,:]

print(f"Number of symmetry operations of group: {len(sym_data.rotations)}")

for j in range(1):
    new_points = []
    spin = []
    grp_chr = []
    op_viz = []
    tol = 1e-5
    pn = lattice[j,:]
    for i, rot in enumerate(sym_data.rotations):
        if (i >= 1 and i < 2):
            # POINT
            new_p = rot @ pn
            new_points.append(new_p)
            # ax2.annotate(i, new_p[:2])
            # OPERATION VISUALIZATION
            max_viz = 15
            for k in range(max_viz):
                operation = float(k/max_viz)*rot
                op_viz.append(operation @ pn)
            # SPIN TEST
            spin_test = pn + [0.0, 0.0, 1.0]
            new_spin_test = rot @ spin_test
            ds = new_spin_test - new_p
            spin.append(int(ds[2]))
            gc = 0
            if all(np.isclose(new_p, pn)):
                gc += int(ds[2])
            grp_chr.append(gc)

    new_points = np.transpose(np.array(new_points))
    op_viz = np.transpose(np.array(op_viz))
    # ax2.scatter(new_points[0,:], new_points[1,:])
    ax2.scatter(new_points[0,:], new_points[1,:], new_points[2,:])
    ax2.scatter(op_viz[0,:], op_viz[1,:], op_viz[2,:])

# print(grp_chr)


# ax2.quiver(0.0, 0.0, lattice[0,0], lattice[0,1], angles="xy", scale_units="xy", scale=1, color="red")
# ax2.quiver(0.0, 0.0, lattice[1,0], lattice[1,1], angles="xy", scale_units="xy", scale=1, color="green")
ax2.quiver(0.0, 0.0, 0.0, lattice[0,0], lattice[0,1], 0.0, color="red")
ax2.quiver(0.0, 0.0, 0.0, lattice[1,0], lattice[1,1], 0.0, color="green")

ax2.set_aspect("equal")
ax2.set_xlim([-10000.0, 10000.0])
ax2.set_ylim([-10000.0, 10000.0])

ax1.legend(["AA", "BA", "AB", "BB"], loc="center left", bbox_to_anchor=(1, 0.5))

plt.show()
